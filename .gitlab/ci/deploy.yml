# build-flatpak:
#   stage: build
#   image: fedora:latest
#   before_script:
#     - dnf -y install rust cargo cmake make flatpak flatpak-builder python3-aiohttp python3-toml
#     - flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
#     - flatpak install -y flathub org.freedesktop.Platform//22.08 org.freedesktop.Sdk//22.08 org.freedesktop.Sdk.Extension.rust-stable/x86_64/22.08
#   script:
#     - make flatpak
#   artifacts:
#     paths:
#       - package-build/
#     expire_in: "60 minutes"

build-snap:
  stage: build
  image: ubuntudesktop/gnome-3-38-2004
  before_script:
    - echo $SNAPCRAFT_LOGIN_FILE | base64 --decode --ignore-garbage > snapcraft.login
    - snapcraft login --with snapcraft.login
    - apt update
    - apt install cargo gettext-base cmake -y
  script:
    - make snap
    - snapcraft upload --release=stable squiid*.snap
  # artifacts:
  #   paths:
  #     - squiid*.snap
  #   expire_in: "60 minutes"

build-appimage:
  stage: build
  image: archlinux:latest
  before_script:
    - pacman --noconfirm -Syu curl make rust cmake
    - curl -L https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -o /usr/local/bin/appimagetool
    - chmod a+rx /usr/local/bin/appimagetool
    - previous_dir=`pwd`
    - cd /opt; appimagetool --appimage-extract
    - cd $previous_dir
    - mv /opt/squashfs-root /opt/appimagetool.AppDir
    - rm /usr/local/bin/appimagetool
    - ln -s /opt/appimagetool.AppDir/AppRun /usr/local/bin/appimagetool

  script:
    - make appimage
  artifacts:
    paths:
      - package-build/Squiid_Calculator.AppImage

# build-deb:
#   stage: build
#   image: ubuntu:focal
#   before_script:
#     - DEBIAN_FRONTEND=noninteractive apt update
#     - DEBIAN_FRONTEND=noninteractive apt install -y build-essential binutils lintian debhelper dh-make devscripts cmake fakeroot git cargo cmake gnupg
#     - echo "$GPG_PRIVATE_KEY_B64" | base64 --decode | gpg --batch --import
#     - gpg --list-keys --fingerprint --with-colons | sed -E -n -e 's/^fpr:::::::::([0-9A-F]+):$/\1:6:/p' | gpg --import-ownertrust
#   script:
#     - make deb DEBUILD_OPTIONS="-p\"gpg --batch --passphrase $GPG_PASSPHRASE --pinentry-mode loopback\""
#   artifacts:
#     paths:
#       - package-build/squiid_0.1.0-1_amd64.deb
#       - package-build/squiid_0.1.0-1_amd64.dsc
#       - package-build/squiid_0.1.0-1_amd64.changes

# build-deb:
#   stage: build
#   image: proget.makedeb.org/docker/makedeb/makedeb:debian-bullseye
#   before_script:
#     # copy needed files
#     - mkdir package-build/
#     - cp packages/debian/PKGBUILD package-build/

#     # add non root user to execute makedeb
#     - useradd -m non_root
#     - "echo 'non_root ALL=NOPASSWD: ALL' >> /etc/sudoers"
#     - chown -R non_root:non_root package-build/

#     # install build dependencies
#     - cat /etc/apt/sources.list.d/makedeb.list
#     - apt install -y curl cmake git rustup
#     # - curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh -s -- -y
#     # - source "$HOME/.cargo/env"
#     # - rustup target add x86_64-unknown-linux-musl
#     # - rustup show
#     # - rustup default stable

#   script:
#     - git archive --format=tar.gz -o package-build/squiid-0.1.0.tar.gz trunk
#     - cd package-build/
#     - sudo -u non_root makedeb